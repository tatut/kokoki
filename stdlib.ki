# Kokoki standard library

: dup2 (a b -- a1 a2 b1 b2)
  swap dup rot dup rot swap dump  ;

# drop next to top element
: nip (a b -- b)
  swap drop ;

# copy next to top element
: over (a b -- a b a)
  swap dup rot swap ;

: -rot (a b c -- c a b)
  rot rot ;

: ?dup (a -- a a) # if a is truthy
  [] copy over apush over apush cond ;

: 2dup (a b -- a b a b)
  over over ;

: 2nip (a b c d -- c d)
  rot drop rot drop ;

# "foo,bar" 0 [dup . "idx".] [dup 1 + swap rot len rot dump false] while drop .

# Convert string containing digits to an integer number
: str->int (str -- num)
  [48 -] each
  [swap 10 * +] fold ;

# Turn n top items in stack to an array
# eg. 1 2 2 array => [1 2]
: array (n-items* n -- arr)
  [] copy swap [swap apush] swap times reverse ;

# Implement if with the primitive cond
# use like:
# 1 2 < ["one is less than two".] if
: if (bool code -- )
  swap [] copy swap apush swap apush cond ;

# Like if, but also takes an else block
: if-else (bool then else -- )
  swap rot [] copy swap apush swap apush
  true apush swap apush
  cond ;

# do-idx, run code for each index in array
: do-idx (arr code -- arr)
swap len
 0 [ "in idx " . dump nl dup 1 + swap rot dump exec ]
 rot dump times
 dump ;

# ch-idx  first index of char in string
#: ch-idx (str ch -- str idx)


# split string at char
#: split (str ch -- str1 str2)
